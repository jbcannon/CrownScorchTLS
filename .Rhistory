las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/segmented_trees/pos_A-04_6986.las')
library(lidR)
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/segmented_trees/pos_A-04_6986.las')
plot(las)
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
plot(las)
remove_stem(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
remove_stem(las)
las = remove_stem(las)
plot(las)
load('R:/landscape_ecology/projects/crown-scorch-TLS//data/RF_models.Rdata')
View(RF_scorch_int)
setwd("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS")
save('RF_scorch_intensity', file = 'data/.RData')
save('RF_scorch_int', file = 'data/.RData')
rm(list=ls())
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
las = remove_stem(las)
las$ReturnNumber
las$Reflectance
if(is.null(las$Reflectance)) stop('las does not contain Reflectance column. Use add_reflectance() function to calculate it from Intensity')
# return density histogram with defined breaks
get_histogram = function(las, breaks) {
if(is.null(las$Reflectance)) stop('las does not contain Reflectance column. Use add_reflectance() function to calculate it from Intensity')
ref = las$Reflectance
ref = ref[ref < max(breaks)]
ref = ref[ref > min(breaks)]
histogram = hist(ref, breaks=breaks, plot = FALSE)
histogram = data.frame(intensity = histogram$mids,
density = histogram$density)
return(histogram)
}
get_histogram(las)
add_reflectance(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
add_reflectance(las)
las = add_reflectance(las)
las = get_histogram(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
las = get_histogram(las)
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
las = remove_stem(las)
las = add_reflectance(las)
histogram = get_histogram(las)
histogram = get_histogram(las)
histogram
load('data/.RData')
predict(histogram, RF_scorch_int)
randomForest::predict(histogram, RF_scorch_int)
predict(RF_scorch_int, newdata=histogram)
RF_scorch_int
str(RF_scorch_int)
histogram
plot(intensity ~ density, data = histogram)
plot(density ~ intensity, data = histogram)
plot(density ~ intensity, data = histogram, lty='l')
plot(density ~ intensity, data = histogram, type='l')
plot(density ~ intensity, data = histogram, type='l')
plot(density ~ intensity, data = histogram, type='l', ylab='Reflectance')
plot(density ~ intensity, data = histogram, type='l', xlab='Reflectance')
plot(density ~ intensity, data = histogram, type='l', xlab='Reflectance (dB)')
str(RF_scorch_int)
str(RF_scorch_int)$xlevels
str(RF_scorch_int)$forest$xlevels
str(RF_scorch_int)$forest
str(RF_scorch_int$forest)
str(RF_scorch_int$forest$xlevels)
names(str(RF_scorch_int$forest$xlevels))
str(RF_scorch_int$forest$xlevels)
names(RF_scorch_int$forest$xlevels)
head(histogram)
tidyr::pivot_wider(histogram)
tidyr::pivot_wider(histogram, name = 'intensity')
head(histogram)
tidyr::pivot_wider(histogram, names_from = 'intensity')
tidyr::pivot_wider(histogram, names_from = 'intensity', value = density)
tidyr::pivot_wider(histogram, names_from = 'intensity', value = 'density')
head(histogram)
tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density')
tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
prediction_data = tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
prediction_data = tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
prediction_data
predict(RF_scorch_int, newdata=histogram)
predict(RF_scorch_int, newdata=prediction_data)
colnames(prediction_data)
histogram = get_histogram(las)
histogram
histogram$intensity = round(histogram$intensity, 1)
histogram$intensity = round(histogram$intensity, 1)
histogram$intensity = round(histogram$intensity, 1)
prediction_data = tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
colnames(prediction_data)
predict(RF_scorch_int, newdata=prediction_data)
predicted_scorch = predict(RF_scorch_int, newdata=prediction_data)
predicted_scorch
name(predicted_scorch)
names(predicted_scorch)
names(predicted_scorch) = 'predicted_socrch'
names(predicted_scorch) = 'predicted_scorch'
message('removing stem using TreeLS::stemPoints()')
las = remove_stem(las)
if('Reflectance' %in% cols(las))
{}
# Ensure Reflectance column exists, add if not
if(!'Reflectance' %in% colnames(las@data)) {
warning('Reflectance column does not exist. Adding using the add_reflectance() function')
las = add_reflectance(las)
}
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
las = remove_stem(las)
message('removing stem using TreeLS::stemPoints()')
las = remove_stem(las)
# Ensure Reflectance column exists, add if not
if(!'Reflectance' %in% colnames(las@data)) {
warning('Reflectance column does not exist. Adding using the add_reflectance() function')
las = add_reflectance(las)
}
# Generate reflectance histogram
histogram = get_histogram(las)
histogram$intensity = round(histogram$intensity, 1)
plot(density ~ intensity, data = histogram, type='l', xlab='Reflectance (dB)')
predict_scorch = function(las, model = NULL) {
if(is.null(model)) {
load('data/.RData')
}
message('removing stem using TreeLS::stemPoints()')
las = remove_stem(las)
# Ensure Reflectance column exists, add if not
if(!'Reflectance' %in% colnames(las@data)) {
warning('Reflectance column does not exist. Adding using the add_reflectance() function')
las = add_reflectance(las)
}
# Generate reflectance histogram
histogram = get_histogram(las)
histogram$intensity = round(histogram$intensity, 1)
plot(density ~ intensity, data = histogram, type='l', xlab='Reflectance (dB)')
# Make scorch prediction
prediction_data = tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
predicted_scorch = predict(model, newdata=prediction_data)
names(predicted_scorch) = 'predicted_scorch'
return(predicted_scorch)
}
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
rm(list = ls())
library(lidR)
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
predict_scorch(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
predict_scorch(las)
load('data/.RData')
saveRDS('RF_scorch_int', 'data/RF_scorch_int.RDS')
rm(list=ls())
load('data/RF_scorch_int.RDS')
load('data/.RData')
saveRDS(RF_scorch_int, 'data/RF_scorch_int.rds')
rm(list= ls())
loadRDS('data/RF_scorch_int.RDS')
readdRDS('data/RF_scorch_int.RDS')
readRDS('data/RF_scorch_int.RDS')
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
rm(list= ls())
load('data/.RData')
rm(list =ls())
las = readLAS('R:/landscape_ecology/projects/crown-scorch-TLS/data/manual-clip-trees/A-04-6978_pre.laz')
predict_scorch(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
predict_scorch(las)
hist(las$Z)
fns = list.files('data/', pattern = '.laz', full.names=TRUE)
fns
fn =  fns[1]
fn
dirname(fn)
new.name = paste0(dirname(fn), '/tree_', sprintf('%001d'), '.laz')
new.name = paste0(dirname(fn), '/tree_', sprintf('%001d', i)), '.laz')
new.name = paste0(dirname(fn), '/tree_', sprintf('%001d', i), '.laz')
i=1
new.name = paste0(dirname(fn), '/tree_', sprintf('%001d', i), '.laz')
new.name
new.name = paste0(dirname(fn), '/tree_', sprintf('%01d', i), '.laz')
new.name
new.name = paste0(dirname(fn), '/tree_', sprintf('%06d', i), '.laz')
new.name
new.name = paste0(dirname(fn), '/tree_', sprintf('%03d', i), '.laz')
new.name
fns = list.files('data/', pattern = '.laz', full.names=TRUE)
for(i in 1:length(fns)) {
fn =  fns[1]
new.name = paste0(dirname(fn), '/tree_', sprintf('%03d', i), '.laz')
file.rename(fns[i], new.name)
}
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
las = readLAS('data/tree_001.laz')
las = add_reflectance(las)
histogram = get_histogram(las)
plot(density ~ Intensity, data=histogram)
plot(density ~ intensity, data=histogram)
plot(density ~ intensity, data=histogram, xlab='Reflectance (dB)')
plot(density ~ intensity, data=histogram, xlab='Reflectance (dB)', type='l')
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
rm(list = ls())
usethis::document()
devtools::document()
las = readLAS('data/tree_001.laz')
las
predict_scorch(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
las = readLAS('data/tree_001.laz')
predict_scorch(las)
randomForest::predict
debug(predict)
#package requires TreeLS
remotes::install_github('tiagodc/TreeLS')
require(randomForests)
require(randomForest)
.packages('packages()')
.packages()
print(.packages())
stop('`randomForests` packages exists but is not attached. Use `library(randomForests`)')
stop('`randomForests` packages exists but is not attached. Use `library(randomForests` to attach it.')
installed.packages('randomForests')
p = installed.packages('randomForests')
str(p)
installed.packages()
#require randomForests package to be installed
pkgs = installed.packages()
pkgs
str(pkgs)
pkgs[1,]
pkgs[,1]
pkgs[,1]
'randomForests' %in% pkgs[,1]
'randomForest' %in% pkgs[,1]
'randomForest' %in% pkgs[,1]
stop("`randomForest` packages is not installed. Use `install.packages('randomForest')` to attach it.")
#' @param las `LAS` object from `lidR` package representing an individually
#' segmented tree collected from RIEGL vz400i Terrestrial Lidar Scanner
#' @param model `randomForests` model object containing histogram data generated
#' from `get_histogram` function. if `model` is `NULL`, then default model
#' from Cannon et al. 2025 is used. But custom model may be generated.
#' @examples
#' library(lidR)
#' las = readLAS('data/tree_001.laz')
#' predict_scorch(las) #using default model from Cannon et al. 2025
#' @export
predict_scorch = function(las, model = NULL) {
#require randomForests package to be installed
pkgs = installed.packages()
if(!'randomForest' %in% pkgs[,1]) {
stop("`randomForest` packages is not installed. Use `install.packages('randomForest')` to install it.")
}
# require randomForests package to be attached
if('randomForest' %in% .packages()) {
}
if(is.null(model)) {
model = readRDS('data/RF_scorch_int.RDS')
}
message('removing stem using TreeLS::stemPoints()')
las = remove_stem(las)
# Ensure Reflectance column exists, add if not
if(!'Reflectance' %in% colnames(las@data)) {
warning('Reflectance column does not exist. Adding using the add_reflectance() function')
las = add_reflectance(las)
}
# Generate reflectance histogram
histogram = get_histogram(las)
histogram$intensity = round(histogram$intensity, 1)
plot(density ~ intensity, data = histogram, type='l', xlab='Reflectance (dB)')
# Make scorch prediction
prediction_data = tidyr::pivot_wider(histogram, names_from = 'intensity', values_from = 'density', names_prefix='intensity_')
predicted_scorch = randomForest::predict(model, newdata=prediction_data)
names(predicted_scorch) = 'predicted_scorch'
return(predicted_scorch)
}
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
#package requires TreeLS
#remotes::install_github('tiagodc/TreeLS')
library(lidR)
library(randomForest)
las = readLAS('data/tree_001.laz')
predict_scorch(las)
source("C:/Users/jeffery.cannon/OneDrive - Joseph W. Jones Ecological Research Center/Desktop/CrownScorchTLS/R/functions.R")
devtools::load_all(".")
rm()
rm(list=ls())
gc()
las = readLAS('data/tree_001.laz')
predict_scorch(las)
getwd()
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
getwd()
message('Loading default random forest prediction model')
las = readLAS('data/tree_001.laz')
# package requires TreeLS
# remotes::install_github('tiagodc/TreeLS')
library(lidR)
library(randomForest)
las = readLAS('data/tree_001.laz')
predict_scorch(las)
# package requires TreeLS
# remotes::install_github('tiagodc/TreeLS')
library(lidR)
library(randomForest)
las = readLAS('data/tree_001.laz')
predict_scorch(las)
# package requires TreeLS
# remotes::install_github('tiagodc/TreeLS')
library(lidR)
library(randomForest)
las = readLAS('data/tree_001.laz')
predict_scorch(las)
las_file = system.file('extdata', 'tree_001.las', package = 'CrownScorchTLS')
las_file
.libPaths()
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las_file
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las_file
las = readLAS(las_file)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
histogram(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
get_histogram(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las = add_reflectance(las)
get_histogram(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las = add_reflectance(las)
get_histogram(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las = add_reflectance(las)
hist = get_histogram(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las = add_reflectance(las)
predict_scorch(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las = add_reflectance(las)
predict_scorch(las)
histogram = get_histogram(las)
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
histogram = get_histogram(las)
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
predict_scorch(las)
histogram = get_histogram(las)
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
predict_scorch(las)
plot(las)
histogram = get_histogram(las)
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
predict_scorch(las)
predict_scorch(las)
las_file = system.file('extdata', 'tree_001.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
plot(las)
plot(las, color='Intensity')
histogram = get_histogram(las)
las = add_reflectance(las) # add reflectance since its missing
las
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
histogram = get_histogram(las)
las
plot(las)
histogram = get_histogram(las)
histogram
```
remove_stem(las)
crown = remove_stem(las)
crown = remove_stem(las)
histogram = get_histogram(crown)
crown = add_reflectance(crown) # add reflectance since its missing
plot(density ~ intensity, data = histogram, xlab='Reflectance (dB)', type='l')
system.files
system.files()
system.file()
system.file('extdata', package = 'CrownScorchTLS')
directory = system.file('extdata', package = 'CrownScorchTLS')
list.files(directory, pattern='.laz', full.names=TRUE)
filenames
directory = system.file('extdata', package = 'CrownScorchTLS')
filenames = list.files(directory, pattern='.laz', full.names=TRUE)
filenames
las = readLAS(f)
f = filenames[[1]]
f
las = readLAS(f)
# Run loop to plot all histograms
for(f in filenames) {
las = readLAS(f)
scorch = predict_scorch(las, plot=TRUE)
scorch = predict_scorch(las, plot=TRUE)
las = readLAS(f)
scorch = predict_scorch(las, plot=TRUE)
par(mfrow = c(2,2))
for(f in filenames) {
las = readLAS(f)
scorch = predict_scorch(las, plot=TRUE)
}
# Run loop to plot all histograms
par(mfrow = c(2,2), mar = c(3,3,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = predict_scorch(las, plot=TRUE)
# Run loop to plot all histograms
par(mfrow = c(2,2), mar = c(3,3,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat(')
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
scorch = suppressWarnings(suppressMessages(predict_scorch(las, plot=TRUE)))
# Run loop to plot all histograms
par(mfrow = c(2,2), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat(')
par(mfrow = c(2,2), mar = c(4,4,1,1))
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
scorch
# Run loop to plot all histograms
par(mfrow = c(2,2), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,2))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,2))
par(mfrow = c(2,2), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,2),'\n')
}
directory = system.file('extdata', package = 'CrownScorchTLS')
filenames = list.files(directory, pattern='.laz', full.names=TRUE)
filenames
directory = system.file('extdata', package = 'CrownScorchTLS')
filenames = list.files(directory, pattern='.laz', full.names=TRUE)
# Run loop to plot all histograms
par(mfrow = c(2,2), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,3),'\n')
}
# Run loop to plot all histograms
par(mfrow = c(2,3), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,3),'\n')
}
# Run loop to plot all histograms
par(mfrow = c(3,2), mar = c(4,4,1,1))
for(f in filenames) {
las = readLAS(f)
scorch = suppressMessages(predict_scorch(las, plot=TRUE))
cat('file:\t', basename(f), '\t', 'scorch:\t', round(scorch,3),'\n')
}
document()
devtools::load_all(".")
dev.off()
usethis::use_testthat
usethis::use_testthat()
usethis::use_test()
getwd()
colnames(las)
las_file = system.file('extdata', 'tree_005.laz', package = 'CrownScorchTLS')
las = readLAS(las_file)
las_file = system.file('extdata', 'tree_005.laz', package = 'CrownScorchTLS')
las = lidR::readLAS(las_file)
colnames(las)
data(las)
as.data.frame(las)
usethis::use_package('lidR')
usethis::use_package('tidyr')
usethis::use_package('TreeLS')
usethis::use_package(c('lidR', 'randomForest'))
usethis::use_package(c('lidR'))
usethis::use_package(c('randomForests'))
usethis::use_package(c('randomForests'))
usethis::use_package(c('randomForest'))
usethis::use_package(c('tidyr'))
usethis::use_package(c('TreeLS'))
> usethis::use_package(c('TreeLS'))
usethis::use_package('TreeLS')
usethis::use_package('TreeLS')
usethis::use_package('TreeLS')
devtools::document()
